#!/usr/bin/env python3
"""
Test Enhanced Utvecklare med Riktig UX Specification - FIXED VERSION
===================================================================

Detta testar hela implementationsfl√∂det med en faktisk spec-fil.
K√∂r fr√•n huvudkatalogen: python test_enhanced_utvecklare.py
"""
"""
Test Enhanced Utvecklare med Riktig UX Specification
===================================================

Detta testar hela implementationsfl√∂det med en faktisk spec-fil
"""

import asyncio
import sys
from pathlib import Path
from tools.file_tools import write_file

async def test_with_real_specification():
    """Test med en riktig UX-specification fr√•n Speldesigner"""
    
    print('üß™ Testing Enhanced Utvecklare med Riktig UX Specification')
    print('=' * 60)
    
    # 1. Skapa en realistisk UX-spec fil f√∂rst
    spec_content = """# UX Specification: User Progress Dashboard

**Story ID:** STORY-PROGRESS-001  
**Created:** 2025-06-08 15:30  
**Designer:** AI Speldesigner (Claude-3.5-Sonnet)  
**Version:** 1.0

## üìã Overview

### Story Description
Create an interactive progress dashboard that shows Anna her learning journey through the DigiNativa digitalization strategy game. The dashboard should motivate continued learning while respecting her time constraints.

### User Value
Anna can quickly see her progress and feel motivated to continue learning during her short coffee breaks.

### Design Principles Alignment
- üéì **Pedagogik Framf√∂r Allt**: Shows learning achievements and next steps
- ‚è∞ **Respekt f√∂r Tid**: Quick overview in under 30 seconds
- üéØ **Intelligens**: Professional progress visualization

## üé® Visual Design

### Style Direction
Clean, professional dashboard with Swedish institutional color palette

### Color Scheme
Primary: #0066CC (institutional blue), Success: #00AA44 (progress green), Background: #F8F9FA

### Layout Approach
Card-based responsive layout, mobile-first design

## üîÑ Interaction Flow

### Entry Point
Main dashboard after login

### Key Interactions
- View current progress percentage (circular progress indicator)
- See completed topics with checkmarks
- Quick access to "Continue Learning" button
- Estimate time to completion

### Exit Point
Navigate to next learning module or return to main menu

## ‚úÖ Acceptance Criteria

1. Progress bar displays completion percentage accurately (0-100%)
2. Completed topics are visually distinguished with green checkmarks
3. Interface loads within 2 seconds on desktop and mobile
4. "Continue Learning" button is prominently displayed
5. Time spent learning is shown in human-readable format
6. Interface works correctly on screens down to 320px width
7. Progress data persists between sessions
8. All interactive elements have minimum 44px touch targets for mobile

## üõ†Ô∏è Technical Implementation Notes

### Frontend Requirements
- React component with TypeScript
- Responsive design using Tailwind CSS
- State management for progress tracking
- API integration for data persistence

### Backend Requirements
- FastAPI endpoints for progress data
- GET /api/v1/progress/{user_id} - fetch user progress
- PUT /api/v1/progress/{user_id} - update progress
- Response time < 200ms for all endpoints

### API Endpoints
- GET /api/v1/progress/{user_id}
- PUT /api/v1/progress/{user_id}
- GET /api/v1/topics - get all available topics

---
*This specification was generated by the DigiNativa AI Speldesigner*
"""
    
    try:
        # 2. Skriv spec-fil till r√§tt plats
        spec_file_path = "docs/specs/spec-STORY-PROGRESS-001.md" 
        write_result = write_file(spec_file_path, spec_content, "test_runner")
        print(f"üìÑ Created specification file: {write_result}")
        
        # 3. Nu testa Utvecklare med denna riktiga spec
        from agents.utvecklare import create_enhanced_utvecklare_agent
        
        print(f"ü§ñ Initializing Enhanced Utvecklare...")
        agent = create_enhanced_utvecklare_agent()
        
        story_data = {
            'story_id': 'STORY-PROGRESS-001',
            'title': 'User Progress Dashboard',
            'description': 'Interactive dashboard showing learning progress',
            'user_value': 'Anna can track her digitalization learning journey',
            'assigned_agent': 'utvecklare',
            'story_type': 'full_feature'
        }
        
        print(f"üöÄ Starting implementation with REAL specification...")
        
        result = await agent.implement_story_from_spec(story_data)
        
        print(f"\nüèÜ IMPLEMENTATION RESULTS:")
        print(f"   Status: {result.get('implementation_status')}")
        print(f"   Backend files: {result.get('backend_files', [])}")
        print(f"   Frontend files: {result.get('frontend_files', [])}")
        print(f"   Implementation time: {result.get('implementation_time_seconds', 0):.1f}s")
        print(f"   Git commit: {result.get('git_commit', 'N/A')}")
        
        if result.get('implementation_status') == 'completed':
            print(f"\n‚úÖ SUCCESS! Full implementation med riktig specification!")
            
            # Test spec parsing
            print(f"\nüìä TESTING SPEC PARSING:")
            spec_data = await agent._read_and_parse_specification('STORY-PROGRESS-001')
            print(f"   Title: {spec_data.get('title')}")
            print(f"   API endpoints found: {spec_data.get('api_endpoints', [])}")
            print(f"   Acceptance criteria: {len(spec_data.get('acceptance_criteria', []))}")
            
            # Show generated files content preview
            print(f"\nüìÅ GENERATED FILES PREVIEW:")
            backend_files = result.get('backend_files', [])
            frontend_files = result.get('frontend_files', [])
            
            if backend_files:
                print(f"   Backend: {len(backend_files)} files")
                for file_path in backend_files:
                    print(f"     ‚úì {file_path}")
            
            if frontend_files:
                print(f"   Frontend: {len(frontend_files)} files")
                for file_path in frontend_files:
                    print(f"     ‚úì {file_path}")
            
        else:
            print(f"\n‚ö†Ô∏è  Implementation completed with status: {result.get('implementation_status')}")
            if result.get('error'):
                print(f"   Error: {result['error']}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Test with real spec failed: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    # Kontrollera att vi √§r i r√§tt katalog
    current_dir = Path.cwd()
    if not (current_dir / "agents").exists():
        print("‚ùå Error: Not in the correct directory!")
        print(f"   Current: {current_dir}")
        print("   Expected: multi-agent-setup root directory")
        print("   Please run: cd C:\\Users\\jcols\\Documents\\multi-agent-setup\\multi-agent-setup")
        sys.exit(1)
    
    print(f"‚úÖ Running test from correct directory: {current_dir}")
    asyncio.run(test_with_real_specification())