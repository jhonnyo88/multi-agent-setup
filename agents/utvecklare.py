"""
DigiNativa AI-Agent: Utvecklare (Full-Stack Arkitekturexpert)
============================================================

PURPOSE:
Denna agent 칛r teamets tekniska motor. Den tar emot detaljerade specifikationer
fr친n Speldesigner-agenten och skriver ren, effektiv och produktionsklar kod
som exakt matchar kraven. Agenten 칛r specialiserad p친 React och FastAPI och
f칬ljer slaviskt de arkitektoniska principer som definierats f칬r projektet.

KEY DEPENDENCIES:
- `docs/dna/architecture.md`: Agentens bibel. Alla tekniska beslut m친ste f칬lja detta.
- `docs/dna/definition_of_done.md`: S칛tter kvalitetskraven f칬r den kod som produceras.
- En specifikationsfil (output fr친n Speldesigner) som input.

ADAPTATION GUIDE:
游댢 F칬r att anpassa denna agent:
1.  Byt ut teknisk expertis (React, FastAPI) i `role` och `backstory` f칬r att
    matcha er teknikstack.
2.  Justera de "orubbliga reglerna" i backstoryn f칬r att spegla era
    egna arkitekturprinciper.
"""

from crewai import Agent
from langchain_anthropic import ChatAnthropic

# Projektimporter
from config.settings import AGENT_CONFIG, SECRETS, TECH_STACK
from tools.file_tools import FileReadTool, FileWriteTool
# TODO: Importera GitTool och ArchitectureValidatorTool n칛r de 칛r skapade

class UtvecklareAgent:
    def __init__(self):
        # 츿NDRING 1: Metodanropet har bytt namn till `_create_agent` f칬r att vara konsekvent.
        self.agent = self._create_agent()

    # 츿NDRING 2: Metoden har d칬pts om till `_create_agent` och tar `self` som parameter.
    def _create_agent(self) -> Agent:
        """
        Skapar den interna CrewAI Agent-instansen.
        Denna agent 칛r programmerad att vara en expert p친 projektets specifika
        teknikstack och att f칬lja arkitekturreglerna slaviskt.
        """
        claude_llm = ChatAnthropic(
            model=AGENT_CONFIG["llm_model"],
            api_key=SECRETS.get("anthropic_api_key"),
            temperature=0.0,  # Temperatur 0.0 f칬r att s칛kerst칛lla att den f칬ljer regler exakt
            max_tokens_to_sample=4000
        )

        return Agent(
            # Rollen definierar agentens specialisering
            role=f"Full-Stack Arkitekturexpert ({TECH_STACK['frontend']['framework']} & {TECH_STACK['backend']['framework']})",

            # M친let 칛r extremt tydligt: omvandla spec till kod enligt reglerna.
            goal="""
            Omvandla en designspecifikation till felfri, effektiv och produktionsklar kod.
            Du skriver b친de frontend-kod i React och backend-kod i FastAPI. Ditt arbete m친ste
            vara en perfekt teknisk implementation av den givna specifikationen och f칬lja
            ALLA arkitektoniska regler utan undantag.
            """,

            # Agentens "personlighet" 칛r en direkt spegling av reglerna i architecture.md.
            backstory=f"""
            Du 칛r en senior full-stack-utvecklare med en passion f칬r kodkvalitet och
            arkitektonisk renhet. Du 칛r inte en kreativ probleml칬sare; du 칛r en
            exceptionell teknisk exekverare. Du l칛ser en specifikation och producerar
            kod som 칛r en exakt avbild av den.

            Ditt arbete styrs av fyra ORUBBLIGA regler fr친n projektets arkitektur-DNA:

            1.  **Tydlig Separation av Ansvar**: Du arbetar antingen i `/frontend` eller
                `/backend` f칬r en given uppgift, aldrig b친da. Du g칬r ALDRIG, under n친gra
                omst칛ndigheter, databasanrop direkt fr친n frontend.

            2.  **API-f칬rst (Kontraktet 칛r Kung)**: Du l칛ser API-kontraktet i specifikationen
                och implementerar det exakt. Du avviker aldrig fr친n de definierade
                endpoints, request-format eller response-format.

            3.  **Statsl칬s Backend**: All din backend-kod 칛r 100% statsl칬s. Varje API-anrop
                칛r en oberoende transaktion. Du sparar aldrig session-state p친 servern.

            4.  **Enkelhet och Pragmatism (KISS)**: Du skriver den enklaste, mest direkta
                koden som uppfyller kraven. Du bygger inte f칬r hypotetiska framtida
                behov. Du l칛gger inte till on칬dig komplexitet.

            Om en specifikation 칛r otydlig eller bryter mot dessa regler, stoppar du ditt
            arbete och rapporterar omedelbart statuskoden `FEL_SPEC_TVETYDIG_U`.
            All kod du skriver m친ste uppfylla kraven i Fas 1 av Definition of Done.
            """,

            # Dessa verktyg 칛r grundl칛ggande. Vi kommer att l칛gga till GitTool h칛rn칛st.
            tools=[
                FileReadTool(),
                FileWriteTool(),
                # TODO: L칛gg till GitTool och ArchitectureValidatorTool
            ],
            llm=claude_llm,
            verbose=True,
            allow_delegation=False, # En utvecklare delegerar inte kodskrivandet
            max_iterations=AGENT_CONFIG["max_iterations"]
        )
    
def create_utvecklare_agent() -> UtvecklareAgent:
    return UtvecklareAgent()