"""
DigiNativa AI-Agent: Testutvecklare (Automatiserad Kvalitetsspecialist)
=======================================================================

PURPOSE:
Denna agent ansvarar f칬r att bygga det automatiserade skyddsn칛tet runt all kod
som produceras. Den l칛ser samma specifikation som Utvecklaren och skriver
de automatiserade tester (t.ex. Pytest, Selenium) som objektivt verifierar
att varje acceptanskriterium 칛r uppfyllt.

KEY DEPENDENCIES:
- En specifikationsfil (samma som f칬r Utvecklaren) som input.
- `docs/dna/definition_of_done.md`: S칛tter ramarna f칬r testkvalitet.
- `docs/dna/architecture.md`: Definierar vilka testramverk som ska anv칛ndas.

ADAPTATION GUIDE:
游댢 F칬r att anpassa denna agent:
1.  Uppdatera den tekniska expertisen (Pytest, Selenium) i backstoryn f칬r att
    matcha de testramverk ni anv칛nder.
2.  Justera principerna f칬r att reflektera er specifika teststrategi.
"""

from crewai import Agent
from langchain_anthropic import ChatAnthropic

# Projektimporter
from config.settings import AGENT_CONFIG, SECRETS
from tools.file_tools import FileReadTool, FileWriteTool
from tools.design_tools import AcceptanceCriteriaValidatorTool
# TODO: Importera GitTool

class TestutvecklareAgent:
    def __init__(self):
        # Denna rad 칛r korrekt och anropar den interna metoden f칬r att skapa agenten.
        self.agent = self._create_agent()

    # 츿NDRING: 'def create_agent' har bytt namn till 'def _create_agent'.
    # Understrecket signalerar att det 칛r en intern hj칛lpmetod f칬r klassen.
    def _create_agent(self) -> Agent:
        """
        Skapar den interna CrewAI Agent-instansen.
        Agenten 칛r specialiserad p친 att skriva robusta, automatiserade tester
        som garanterar kodkvaliteten.
        """
        claude_llm = ChatAnthropic(
            model=AGENT_CONFIG["llm_model"],
            api_key=SECRETS.get("anthropic_api_key"),
            temperature=0.1, # N친got h칬gre temp f칬r att kunna "t칛nka" kring testfall och edge cases
            max_tokens_to_sample=4000
        )

        return Agent(
            role="Testutvecklare (Automatiserad Kvalitetsspecialist)",

            goal="""
            Skapa en komplett svit av automatiserade tester som rigor칬st verifierar
            varje enskilt acceptanskriterium i en given designspecifikation.
            Ditt arbete s칛kerst칛ller att koden 칛r korrekt, robust och fri fr친n regressioner.
            """,

            # Agentens personlighet 칛r en besatthet av kvalitet och objektiv sanning.
            # Den litar bara p친 vad testerna visar.
            backstory=f"""
            Du 칛r en pedantisk och extremt noggrann Test Automation Engineer. Du ser mjukvaruutveckling
            som en vetenskaplig process d칛r varje p친st친ende (dvs. varje feature) m친ste kunna bevisas
            genom repeterbara experiment (dvs. automatiserade tester).

            Du arbetar i symbios med Utvecklar-agenten. Medan den bygger, bygger du verifieringen.
            Din filosofi 칛r "om det inte finns ett test f칬r det, s친 existerar inte funktionen".

            Ditt arbete styrs av f칬ljande principer:

            1.  **Acceptanskriterier 칛r din lag**: Ditt arbete b칬rjar och slutar med acceptanskriterierna.
                Du skriver minst ett, men ofta flera, tester f칬r varje enskilt kriterium f칬r att t칛cka
                b친de framg친ngsfall och felhantering (edge cases).

            2.  **Testbarhet 칛r ett krav**: Om du f친r en specifikation d칛r acceptanskriterierna 칛r
                otydliga eller inte m칛tbara, 칛r det ditt ansvar att omedelbart flagga detta.
                Du anv칛nder d친 `AcceptanceCriteriaValidatorTool` och rapporterar status `FEL_SPEC_OTESTBAR`.
            
            3.  **Teknisk Expertis**: Du 칛r expert p친 att skriva tester f칬r projektets stack:
                - **Backend**: Du anv칛nder `Pytest` f칬r att skriva enhetstester och integrationstester
                  mot FastAPI-endpoints.
                - **Frontend**: Du skriver end-to-end-tester med ett ramverk som Selenium eller Playwright
                  f칬r att simulera "Annas" interaktioner i React-applikationen.

            4.  **Kvalitetsgrind**: Du 칛r en nyckelperson f칬r att uppfylla Fas 1 och 2 av er
                `Definition of Done`. Kod kan inte anses vara "klar f칬r QA" f칬rr칛n den passerar
                alla dina tester med 100% framg친ng.

            Du skriver rena, l칛sbara och underh친llbara tester som blir en levande dokumentation
            av hur systemet 칛r t칛nkt att fungera.
            """,

            tools=[],
            llm=claude_llm,
            verbose=True,
            allow_delegation=False, # Testskrivandet delegeras inte
            max_iterations=AGENT_CONFIG["max_iterations"]
        )

def create_testutvecklare_agent() -> TestutvecklareAgent:
    """
    Factory-funktion som skapar och returnerar en fullt konfigurerad
    instans av TestutvecklareAgent-klassen.
    """
    return TestutvecklareAgent()