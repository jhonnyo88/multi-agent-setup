"""
DigiNativa AI-Agent: Kvalitetsgranskare (Automatiserad Teknisk V칛ktare)
======================================================================

PURPOSE:
Denna agent utf칬r automatiserade, tekniska kvalitetskontroller p친 koden
i en Pull Request. Den fokuserar p친 icke-funktionella krav som prestanda,
kodstandard, tillg칛nglighet och arkitektonisk efterlevnad. Agenten 칛r
en automatiserad grindvakt som s칛kerst칛ller teknisk excellens.

KEY DEPENDENCIES:
- `docs/dna/architecture.md`: Definierar prestandam친l och tekniska standarder.
- `docs/dna/definition_of_done.md`: Ansvarar f칬r att uppfylla kraven i Fas 2.
- `config/settings.py`: H칛mtar specifika kvalitetstr칬sklar (t.ex. Lighthouse-po칛ng).

ADAPTATION GUIDE:
游댢 F칬r att anpassa denna agent:
1.  Uppdatera backstoryn med de specifika verktyg (t.ex. SonarQube, Checkov)
    och standarder som 칛r relevanta f칬r ditt projekt.
2.  Justera de verktyg som agenten anv칛nder f칬r att matcha er CI/CD-pipeline.
"""

from crewai import Agent
from langchain_anthropic import ChatAnthropic

from config.settings import AGENT_CONFIG, SECRETS, QUALITY_STANDARDS
# TODO: Importera verktyg fr친n tools/quality_tools.py

class KvalitetsgranskareAgent:
    def __init__(self):
        self.agent = self._create_agent()

    def _create_agent(self) -> Agent:
        """Factory-funktion f칬r att skapa Kvalitetsgranskare-agenten."""
        claude_llm = ChatAnthropic(
            model=AGENT_CONFIG["llm_model"],
            api_key=SECRETS.get("anthropic_api_key"),
            temperature=0.0, # Noll kreativitet. Ska bara f칬lja regler.
            max_tokens_to_sample=4000
        )

        return Agent(
            # Rollen 칛r h칛mtad fr친n team_roles.md: "Automatiserad Teknisk V칛ktare"
            role="Kvalitetsgranskare (Automatiserad Teknisk V칛ktare)",

            goal="""
            K칬ra en f칬rdefinierad svit av tekniska analysverktyg mot en ny Pull Request
            och objektivt rapportera om koden uppfyller projektets samtliga kvalitetsgrindar
            f칬r prestanda, kodstandard, tillg칛nglighet och testt칛ckning.
            """,

            # Agentens personlighet 칛r en objektiv och datadriven maskin.
            backstory=f"""
            Du 칛r ett helautomatiserat kvalitetssystem, en "bot". Du har inga 친sikter eller
            k칛nslor. Ditt enda syfte 칛r att exekvera en serie tekniska kontroller och
            rapportera resultatet. Du 칛r den sista grinden innan en feature kan godk칛nnas
            f칬r leverans.

            Din checklista 칛r strikt och baseras p친 projektets DNA:

            1.  **Prestanda & Tillg칛nglighet**: Du anv칛nder ett verktyg som Lighthouse f칬r att
                analysera frontend-koden p친 dess preview-URL. Du verifierar att alla po칛ng
                (Performance, Accessibility, etc.) 칛r 칬ver {QUALITY_STANDARDS['performance']['lighthouse_performance']}.
            

            2.  **Kodstandard**: Du k칬r linters (t.ex. ESLint) mot kodbasen och s칛kerst칛ller
                att det finns noll fel eller varningar.

            3.  **Testt칛ckning**: Du analyserar resultatet fr친n Testutvecklarens k칬rning och
                verifierar att kodt칛ckningen 칬verstiger
                {QUALITY_STANDARDS['code_quality']['test_coverage_minimum']}%.

            4.  **Arkitektur-efterlevnad**: Du skannar koden f칬r uppenbara brott mot
                arkitekturen, s친som att hemligheter (API-nycklar) har checkats in i koden.
            

            Om alla kontroller passerar, rapporterar du `TEKNISK_GRANSKNING_OK`. Om n친gon kontroll
            misslyckas, rapporterar du den specifika felkoden (t.ex. `FEL_KVALITETSGRIND_PRESTANDA`)
            tillsammans med den r친a outputen fr친n det misslyckade verktyget.
            """,

            tools=[
                # TODO: L칛gg till LighthouseTool, CodeQualityTool, TestCoverageTool
            ],
            llm=claude_llm,
            verbose=True,
            allow_delegation=False, # Processen 칛r helt automatiserad
            max_iterations=AGENT_CONFIG["max_iterations"]
        )
    
def create_kvalitetsgranskare_agent() -> KvalitetsgranskareAgent:
    return KvalitetsgranskareAgent()